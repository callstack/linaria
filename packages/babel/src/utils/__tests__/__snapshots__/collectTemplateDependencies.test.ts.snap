// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`collectTemplateDependencies hoist chain of statements 1`] = `
"import str from \\"module\\";
let arg = str;
let variable = arg + \\"2\\";
const _exp = /*#__PURE__*/() => variable;
function fn() {
  {
    const template = tag\`\${_exp()}\`;
  }
}"
`;

exports[`collectTemplateDependencies hoist expressions 1`] = `
"import x from \\"module\\";
const _exp = /*#__PURE__*/() => 42;
const _exp2 = /*#__PURE__*/() => \\"test\\";
const _exp3 = /*#__PURE__*/() => () => \\"result\\";
const _exp4 = /*#__PURE__*/() => 21 * x;
function fn() {
  const template = tag\`\${_exp()}\${_exp2()}\${_exp3()}\${_exp4()}\`;
}"
`;

exports[`collectTemplateDependencies hoistExpression with destructuring 1`] = `
"let result = \\"result\\";
let {
  variable
} = {
  variable: result
};
const _exp = /*#__PURE__*/() => variable;
function fn() {
  const template = tag\`\${_exp()}\`;
}"
`;

exports[`collectTemplateDependencies hoistExpression with object 1`] = `
"const _exp = /*#__PURE__*/() => ({
  variable: \\"test\\"
}).variable;
function fn() {
  const template = tag\`\${_exp()}\`;
}"
`;

exports[`collectTemplateDependencies non-hoistable expression 1`] = `
"This identifier cannot be used in the template, because it is a function parameter.
> 1 | function fn(arg) {
    |             ^^^
  2 |   {
  3 |     const base = \\"base\\";
  4 |     const variable = base + arg;"
`;

exports[`collectTemplateDependencies should hoist expressions after imports 1`] = `
"import { styled } from '@linaria/react';
import slugify from '../__fixtures__/slugify';
const _exp = /*#__PURE__*/() => slugify('test');
export const Title = styled.h1\`
  &:before {
    content: \\"\${_exp()}\\"
  }
\`;"
`;
